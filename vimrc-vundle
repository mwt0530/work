set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'taglist.vim'
Plugin 'cscope.vim'
Plugin 'Gundo'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'kien/ctrlp.vim'
Plugin 'altercation/vim-colors-solarized'
"Plugin 'Lokaltog/vim-powerline'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-surround'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'godlygeek/tabular'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'easymotion/vim-easymotion'
Plugin 'Raimondi/delimitMate'
Plugin 'klen/python-mode'
Plugin 'thinca/vim-quickrun'
"Plugin 'xuhdev/SingleCompile'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'Valloric/YouCompleteMe'

call vundle#end()

"---solarized配色---
if $_ != 'git commit'
    colorscheme solarized
    set background=dark
endif

syntax enable
syntax on

set history=50
"set autochdir

filetype plugin on
filetype plugin indent on

set incsearch
"set laststatus=2

set tabstop=4
set softtabstop=4
set expandtab
set shiftwidth=4
set autoindent
"设置使用 C/C++ 语言的自动缩进方式：
"set cindent

map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

vnoremap < <gv
vnoremap > >gv

map <leader>h <esc>:tabprevious<CR>
map <leader>l <esc>:tabnext<CR>
map <leader>t <esc>:tabnew<CR>

"--------------------------------------------------------------------------------
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.rb,*.java,*.py exec ":call SetTitle()"

func SetTitle()
	if &filetype == 'sh'
		call setline(1,"\#!/bin/bash")
		call append(line("."), "")
	elseif &filetype == 'python'
		call setline(1,"#!/usr/bin/env python")
		call append(line("."),"# -*- coding: utf-8 -*-")
		call append(line(".")+1, "")
	elseif &filetype == 'ruby'
		call setline(1,"#!/usr/bin/env ruby")
		call append(line("."),"# encoding: utf-8")
		call append(line(".")+1, "")
	endif
	if expand("%:e") == 'cpp'
		call setline(1, "#include<iostream>")
		call append(line("."), "using namespace std;")
		call append(line(".")+1, "")
	endif
	if &filetype == 'c'
		call setline(1, "#include <stdio.h>")
		call append(line("."), "#include <unistd.h>")
		call append(line(".")+1, "#include <stdlib.h>")
		call append(line(".")+2, "#include <string.h>")
		call append(line(".")+3, "")
		call append(line(".")+4, "int main(int argc, char *argv[])")
		call append(line(".")+5, "")
	endif
	if &filetype == 'java'
		call setline(1,"public class ".expand("%:r"))
		call append(line("."),"")
	endif
endfunc

autocmd BufNewFile * normal G

"------------------------------plugin----------------------------------------
imap <F2> <C-X><C-I>
imap <F3> <C-X><C-O>

"ctags
set tags=tags;
"map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR> :TlistUpdate<CR>

"------taglist------
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Use_Right_Window = 1
"let Tlist_Process_File_Always=1
"taglist始终解析文件中的tag，不管taglist窗口有没有打开
let Tlist_File_Fold_Auto_Close=1
nnoremap<F9> :TlistToggle<CR>

"------nerdtree------
nnoremap<F8> :NERDTreeToggle<CR>

"------Gundo------
let g:gundo_width = 30
nnoremap<F4> :GundoToggle<CR>

"------ctrlp------
let g:ctrlp_working_path_mode = 0
let g:ctrlp_max_depth = 40
let g:ctrlp_max_files = 20000
"if executable('ag')
"  " Use ag over grep
"  set grepprg=ag\ --nogroup\ --nocolor
"
"  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
"  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
"
"  " ag is fast enough that CtrlP doesn't need to cache
"  let g:ctrlp_use_caching = 0
"endif

"------YouCompleteMe------
set completeopt-=preview
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_complete_in_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1
"let g:ycm_key_invoke_completion = '<C-a>'

let g:ycm_show_diagnostics_ui = 0
let g:ycm_error_symbol = '*'
let g:ycm_warning_symbol = '>'

let g:ycm_filetype_whitelist = {
        \'c': 1,
        \'cpp': 1,
        \'python': 1
        \}

inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>

"------UltiSnips------
let g:UltiSnipsExpandTrigger="<leader><tab>"
let g:UltiSnipsJumpForwardTrigger="<leader><tab>"
let g:UltiSnipsJumpBackwardTrigger="<leader><S-tab>"

"------vim-indent-guides------
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 2
nmap <silent> <Leader>i <Plug>IndentGuidesToggle

"------vim-trailing-whitespace------
nnoremap <leader><space> :FixWhitespace<cr>

"------tabular------
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:\zs<CR>
vmap <Leader>a: :Tabularize /:\zs<CR>

"------vim-quickrun------
let g:quickrun_config = {
            \   "_" : {
            \       "outputter" : "message",
            \   },
            \}

let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r <Plug>(quickrun)
map <F5> <esc>:QuickRun<CR>

"------vim-easymotion------
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
map <Leader><leader>. <Plug>(easymotion-repeat)"

"------python-mode------
let g:pymode_folding = 0
let g:pymode_options = 0
let g:pymode_trim_whitespaces = 0
"let g:pymode_rope_completion = 0
let g:pymode_syntax = 0
let g:pymode_rope = 0
let g:pymode_lint_on_write = 0
nnoremap <leader>c :PymodeLint<CR>
nnoremap <leader><leader>c :PymodeLintAuto<CR>
